{"version":3,"sources":["logo.svg","Node.js","Draggable.js","utility/Queue.js","algorithims/bfs.js","utility/PriorityQueue.js","algorithims/dijkstra.js","algorithims/astar.js","utility/Generator.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Node","row","col","console","log","this","props","isFinish","isStart","isWall","path_visited","visited","onMouseDown","onMouseEnter","onMouseUp","extraClassType","id","className","e","button","onContextMenu","preventDefault","children","Component","Draggable","element","findDOMNode","setState","dragging","rel","x","pageX","offsetLeft","y","pageY","offsetTop","stopPropagation","onMouseMove","state","pos","initialPos","document","addEventListener","removeEventListener","style","left","top","Queue","enqueue","items","push","dequeue","isEmpty","shift","peek","item","length","size","bfs","startNode","grid","queue","seen","Array","fill","map","n","groups","currLevel","curr","nextNodes","getNeighbors","node","previous","neighbors","parent","i","right","PriorityQueue","comparator","a","b","_heap","_comparator","values","forEach","value","_siftUp","poppedValue","bottom","_swap","pop","_siftDown","replacedValue","j","_greater","maxChild","dijkstra","cost","new_cost","astar","targetNode","manhattanDistance","start","end","Math","abs","makeSingleGenerator","component","generator","globalNonce","async","localNonce","iter","next","resumeValue","done","isSearching","visualizeDijkstra","visualizeAstar","visualizeBFS","GRID_WIDTH","max","window","innerWidth","GRID_HEIGHT","innerHeight","start_row","start_col","finish_row","finish_col","delay","ms","Promise","resolve","setTimeout","rclass","clearPath","newGrid","array","slice","visitedNodes","count","newNode","requestAnimationFrame","current","orderedGroups","lastNode","orderedNode","Grid","runSearch","initGrid","arr","currRow","genNode","lmbDown","rmbDown","selectedObject","activeAlgo","val","toggledGrid","toggleWallOn","toggleWallOff","editedGrid","moveFinish","moveStart","type","name","defaultChecked","disabled","onChange","setAlgorithim","target","onClick","startSearch","cancelSearch","clearWalls","resetGrid","ridx","cidx","handleMouseDown","handleMouseEnter","handleMouseUp","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82adae48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\n\r\nimport \"./css/node.css\";\r\n\r\nclass Node extends Component {\r\n  mouseOverFunc(row, col) {\r\n    console.log(`${row} , ${col}`);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      path_visited,\r\n      visited,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp\r\n    } = this.props;\r\n\r\n    const extraClassType = isStart\r\n      ? \"node-start\"\r\n      : isFinish\r\n      ? \"node-finish\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : path_visited\r\n      ? \"node-path-visited\"\r\n      : visited\r\n      ? \"node-visited\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassType}`}\r\n        onMouseDown={e => {\r\n          onMouseDown(row, col, e.button);\r\n        }}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}\r\n        onContextMenu={e => e.preventDefault()}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Node };\r\n","import React, { Component } from \"react\";\r\nimport { findDOMNode } from \"react-dom\";\r\n\r\nimport \"./css/draggable.css\";\r\n\r\nclass Draggable extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      pos: props.initialPos,\r\n      dragging: false,\r\n      rel: null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {}\r\n\r\n  componentDidUpdate(props, state) {\r\n    if (this.state.dragging && !state.dragging) {\r\n      document.addEventListener(\"mousemove\", this.onMouseMove);\r\n      document.addEventListener(\"mouseup\", this.onMouseUp);\r\n    } else if (!this.state.dragging && state.dragging) {\r\n      document.removeEventListener(\"mousemove\", this.onMouseMove);\r\n      document.removeEventListener(\"mouseup\", this.onMouseUp);\r\n    }\r\n  }\r\n\r\n  onMouseDown = e => {\r\n    if (e.button !== 0) return;\r\n\r\n    var element = findDOMNode(this);\r\n\r\n    this.setState({\r\n      dragging: true,\r\n      rel: {\r\n        x: e.pageX - element.offsetLeft,\r\n        y: e.pageY - element.offsetTop\r\n      }\r\n    });\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  onMouseUp = e => {\r\n    this.setState({ dragging: false });\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n\r\n  onMouseMove = e => {\r\n    if (!this.state.dragging) return;\r\n\r\n    this.setState({\r\n      pos: {\r\n        x: e.pageX - this.state.rel.x,\r\n        y: e.pageY - this.state.rel.y\r\n      }\r\n    });\r\n\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  };\r\n  render() {\r\n    return (\r\n      <div\r\n        className={`my-draggable`}\r\n        style={{ left: `${this.state.pos.x}px`, top: `${this.state.pos.y}px` }}\r\n        onMouseDown={e => this.onMouseDown(e)}\r\n      >\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Draggable };\r\n","class Queue {\r\n  constructor() {\r\n    this.items = [];\r\n  }\r\n\r\n  enqueue = element => {\r\n    //add tp queue\r\n    this.items.push(element);\r\n  };\r\n\r\n  dequeue = () => {\r\n    if (this.isEmpty()) return \"null\";\r\n    return this.items.shift();\r\n  };\r\n\r\n  peek = () => {\r\n    if (this.isEmpty()) return \"null\";\r\n    return this.item[0];\r\n  };\r\n\r\n  isEmpty = () => {\r\n    return this.items.length === 0;\r\n  };\r\n\r\n  size = () => {\r\n    return this.items.length;\r\n  };\r\n}\r\n\r\nexport default Queue;\r\n","import \"../utility/Queue\";\r\nimport Queue from \"../utility/Queue\";\r\n\r\nexport function bfs(startNode, grid) {\r\n  var queue = new Queue();\r\n  let seen = Array(grid.length)\r\n    .fill(0)\r\n    .map(n => new Array(grid[0].length).fill(false));\r\n\r\n  let groups = [];\r\n\r\n  queue.enqueue(startNode);\r\n\r\n  while (!queue.isEmpty()) {\r\n    let currLevel = [];\r\n    let size = queue.size();\r\n\r\n    while (size > 0) {\r\n      let curr = queue.dequeue();\r\n\r\n      if (!seen[curr.row][curr.col]) {\r\n        seen[curr.row][curr.col] = true;\r\n        currLevel.push(curr);\r\n\r\n        //Early exit\r\n        if (curr.isFinish) {\r\n          groups.push(currLevel);\r\n          return groups;\r\n        }\r\n\r\n        let nextNodes = getNeighbors(curr, grid);\r\n\r\n        for (const node of nextNodes) {\r\n          if (!seen[node.row][node.col] && (node.isFinish || !node.isWall)) {\r\n            node.previous = curr;\r\n            queue.enqueue(node);\r\n          }\r\n        }\r\n      }\r\n\r\n      size -= 1;\r\n    }\r\n    groups.push(currLevel);\r\n  }\r\n\r\n  return groups;\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { row, col } = node;\r\n  //Up\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  //Down\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  //Left\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  //Right\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n","const top = 0;\r\nconst parent = i => ((i + 1) >>> 1) - 1;\r\nconst left = i => (i << 1) + 1;\r\nconst right = i => (i + 1) << 1;\r\n\r\nclass PriorityQueue {\r\n  constructor(comparator = (a, b) => a > b) {\r\n    this._heap = [];\r\n    this._comparator = comparator;\r\n  }\r\n  size() {\r\n    return this._heap.length;\r\n  }\r\n\r\n  isEmpty() {\r\n    return this.size() === 0;\r\n  }\r\n\r\n  peek() {\r\n    return this._heap[top];\r\n  }\r\n\r\n  push(...values) {\r\n    values.forEach(value => {\r\n      this._heap.push(value);\r\n      this._siftUp();\r\n    });\r\n    return this.size();\r\n  }\r\n\r\n  pop() {\r\n    const poppedValue = this.peek();\r\n    const bottom = this.size() - 1;\r\n    if (bottom > top) {\r\n      this._swap(top, bottom);\r\n    }\r\n    this._heap.pop();\r\n    this._siftDown();\r\n    return poppedValue;\r\n  }\r\n\r\n  replace(value) {\r\n    const replacedValue = this.peek();\r\n    this._heap[top] = value;\r\n    this._siftDown();\r\n    return replacedValue;\r\n  }\r\n\r\n  _greater(i, j) {\r\n    return this._comparator(this._heap[i], this._heap[j]);\r\n  }\r\n\r\n  _swap(i, j) {\r\n    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];\r\n  }\r\n\r\n  _siftUp() {\r\n    let node = this.size() - 1;\r\n    while (node > top && this._greater(node, parent(node))) {\r\n      this._swap(node, parent(node));\r\n      node = parent(node);\r\n    }\r\n  }\r\n\r\n  _siftDown() {\r\n    let node = top;\r\n    while (\r\n      (left(node) < this.size() && this._greater(left(node), node)) ||\r\n      (right(node) < this.size() && this._greater(right(node), node))\r\n    ) {\r\n      let maxChild =\r\n        right(node) < this.size() && this._greater(right(node), left(node))\r\n          ? right(node)\r\n          : left(node);\r\n      this._swap(node, maxChild);\r\n      node = maxChild;\r\n    }\r\n  }\r\n}\r\n\r\nexport default PriorityQueue;\r\n","import PriorityQueue from \"../utility/PriorityQueue\";\r\n\r\nexport function dijkstra(startNode, grid) {\r\n  var queue = new PriorityQueue(\r\n    (a, b) => cost[a.row][a.col] < cost[b.row][b.col]\r\n  );\r\n\r\n  let cost = Array(grid.length)\r\n    .fill(0)\r\n    .map(n => new Array(grid[0].length).fill(null));\r\n\r\n  cost[startNode.row][startNode.col] = 0;\r\n\r\n  let visited = [];\r\n\r\n  queue.push(startNode);\r\n\r\n  while (!queue.isEmpty()) {\r\n    let curr = queue.pop();\r\n\r\n    visited.push(curr);\r\n\r\n    //Early exit\r\n    if (curr.isFinish) {\r\n      return visited;\r\n    }\r\n\r\n    let nextNodes = getNeighbors(curr, grid);\r\n\r\n    for (const node of nextNodes) {\r\n      let new_cost = cost[curr.row][curr.col] + 1;\r\n      if (\r\n        (node.isFinish || !node.isWall) &&\r\n        (cost[node.row][node.col] == null ||\r\n          new_cost < cost[node.row][node.col])\r\n      ) {\r\n        cost[node.row][node.col] = new_cost;\r\n        node.previous = curr;\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visited;\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { row, col } = node;\r\n  //Up\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  //Down\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  //Left\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  //Right\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n","import PriorityQueue from \"../utility/PriorityQueue\";\r\n\r\nexport function astar(startNode, targetNode, grid) {\r\n  const queue = new PriorityQueue(\r\n    (a, b) =>\r\n      cost[a.row][a.col] + manhattanDistance(a, targetNode) <=\r\n      cost[b.row][b.col] + manhattanDistance(b, targetNode)\r\n  );\r\n\r\n  let cost = Array(grid.length)\r\n    .fill(0)\r\n    .map(n => new Array(grid[0].length).fill(null));\r\n\r\n  cost[startNode.row][startNode.col] = 0;\r\n\r\n  let visited = [];\r\n\r\n  queue.push(startNode);\r\n\r\n  while (!queue.isEmpty()) {\r\n    let curr = queue.pop();\r\n\r\n    visited.push(curr);\r\n\r\n    //Early exit\r\n    if (curr.isFinish) {\r\n      return visited;\r\n    }\r\n\r\n    let nextNodes = getNeighbors(curr, grid);\r\n\r\n    for (const node of nextNodes) {\r\n      let new_cost = cost[curr.row][curr.col] + 1;\r\n      if (\r\n        (node.isFinish || !node.isWall) &&\r\n        (cost[node.row][node.col] == null ||\r\n          new_cost < cost[node.row][node.col])\r\n      ) {\r\n        cost[node.row][node.col] = new_cost;\r\n        node.previous = curr;\r\n        queue.push(node);\r\n      }\r\n    }\r\n  }\r\n\r\n  return visited;\r\n}\r\n\r\nfunction getNeighbors(node, grid) {\r\n  const neighbors = [];\r\n  const { row, col } = node;\r\n  //Up\r\n  if (row > 0) neighbors.push(grid[row - 1][col]);\r\n  //Down\r\n  if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n  //Left\r\n  if (col > 0) neighbors.push(grid[row][col - 1]);\r\n  //Right\r\n  if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n  return neighbors;\r\n}\r\n\r\n//Hueristics\r\nfunction manhattanDistance(start, end) {\r\n  return Math.abs(start.row - end.row) + Math.abs(start.col - end.col);\r\n}\r\n","//Utility to help create abortable async calls using generator functions\r\n//Code from Google Web Dev Article\r\n//https://dev.to/chromiumdev/cancellable-async-functions-in-javascript-5gp7\r\n\r\nexport function makeSingleGenerator(component, generator) {\r\n  let globalNonce;\r\n  return async function(...args) {\r\n    const localNonce = (globalNonce = {});\r\n\r\n    const iter = generator(...args);\r\n\r\n    let resumeValue;\r\n    for (;;) {\r\n      const n = iter.next(resumeValue);\r\n      if (n.done) {\r\n        return n.value; // final return value of passed generator\r\n      }\r\n\r\n      // whatever the generator yielded, _now_ run await on it\r\n      resumeValue = await n.value;\r\n      if (localNonce !== globalNonce) {\r\n        return; // a new call was made\r\n      }\r\n\r\n      if (component.state.isSearching === false) {\r\n        return;\r\n      }\r\n\r\n      // next loop, we give resumeValue back to the generator\r\n    }\r\n  };\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport { Node } from \"./Node.js\";\r\nimport { Draggable } from \"./Draggable.js\";\r\nimport { bfs } from \"./algorithims/bfs\";\r\nimport { dijkstra } from \"./algorithims/dijkstra\";\r\nimport { astar } from \"./algorithims/astar\";\r\nimport { makeSingleGenerator } from \"./utility/Generator\";\r\n\r\nimport \"./css/grid.css\";\r\nimport \"./css/main.css\";\r\nimport \"./css/algowidget.css\";\r\n\r\nconst GRID_WIDTH = Math.max(40, (window.innerWidth - 300) / 30);\r\nconst GRID_HEIGHT = Math.max(25, (window.innerHeight - 50) / 30);\r\n\r\nconst DEFAULT_START_ROW = 14;\r\nconst DEFAULT_START_COL = 10;\r\nconst DEFAULT_FINISH_ROW = 14;\r\nconst DEFAULT_FINISH_COL = 30;\r\n\r\nlet start_row = DEFAULT_START_ROW;\r\nlet start_col = DEFAULT_START_COL;\r\nlet finish_row = DEFAULT_FINISH_ROW;\r\nlet finish_col = DEFAULT_FINISH_COL;\r\n\r\nconst delay = ms => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n\r\nfunction* visualizeDijkstra(rclass) {\r\n  rclass.clearPath();\r\n  yield delay(100);\r\n\r\n  const newGrid = rclass.state.array.slice();\r\n\r\n  let visitedNodes = dijkstra(newGrid[start_row][start_col], newGrid);\r\n  let count = 0;\r\n  //Loop through the nodes\r\n  for (let i = 0; i < visitedNodes.length; i++) {\r\n    let newNode = {\r\n      ...visitedNodes[i],\r\n      visited: true\r\n    };\r\n    count++;\r\n\r\n    //Flag visited nodes for update\r\n    newGrid[newNode.row][newNode.col] = newNode;\r\n\r\n    if (count % 4 === 0) {\r\n      //Ascynhrously Update state\r\n      yield delay(50);\r\n      requestAnimationFrame(() => {\r\n        rclass.setState({ array: newGrid });\r\n      });\r\n    }\r\n  }\r\n\r\n  if (visitedNodes[visitedNodes.length - 1].isFinish) {\r\n    let current = visitedNodes[visitedNodes.length - 1];\r\n\r\n    while (current.row !== start_row || current.col !== start_col) {\r\n      let newNode = {\r\n        ...current,\r\n        path_visited: true\r\n      };\r\n\r\n      newGrid[newNode.row][newNode.col] = newNode;\r\n      yield delay(50);\r\n      rclass.setState({ array: newGrid });\r\n\r\n      current = current.previous;\r\n    }\r\n  }\r\n\r\n  rclass.setState({ isSearching: false });\r\n}\r\n\r\nfunction* visualizeAstar(rclass) {\r\n  rclass.clearPath();\r\n  yield delay(100);\r\n\r\n  const newGrid = rclass.state.array.slice();\r\n\r\n  let count = 0;\r\n  let visitedNodes = astar(\r\n    newGrid[start_row][start_col],\r\n    newGrid[finish_row][finish_col],\r\n    newGrid\r\n  );\r\n\r\n  //Loop through the nodes\r\n  for (let i = 0; i < visitedNodes.length; i++) {\r\n    let newNode = {\r\n      ...visitedNodes[i],\r\n      visited: true\r\n    };\r\n    count++;\r\n\r\n    //Flag visited nodes for update\r\n    newGrid[newNode.row][newNode.col] = newNode;\r\n\r\n    if (count % 4 === 0) {\r\n      //Ascynhrously Update state\r\n      yield delay(50);\r\n      requestAnimationFrame(() => {\r\n        rclass.setState({ array: newGrid });\r\n      });\r\n    }\r\n  }\r\n\r\n  if (visitedNodes[visitedNodes.length - 1].isFinish) {\r\n    let current = visitedNodes[visitedNodes.length - 1];\r\n\r\n    while (current.row !== start_row || current.col !== start_col) {\r\n      let newNode = {\r\n        ...current,\r\n        path_visited: true\r\n      };\r\n\r\n      newGrid[newNode.row][newNode.col] = newNode;\r\n      yield delay(50);\r\n      rclass.setState({ array: newGrid });\r\n\r\n      current = current.previous;\r\n    }\r\n  }\r\n  rclass.setState({ isSearching: false });\r\n}\r\n\r\nfunction* visualizeBFS(rclass) {\r\n  rclass.clearPath();\r\n  yield delay(100);\r\n\r\n  const newGrid = rclass.state.array.slice();\r\n\r\n  let orderedGroups = bfs(newGrid[start_row][start_col], newGrid);\r\n  let lastNode = null;\r\n\r\n  //Loop through the nodes in each level of bfs\r\n  for (let i = 0; i < orderedGroups.length; i++) {\r\n    for (let orderedNode of orderedGroups[i]) {\r\n      let newNode = {\r\n        ...orderedNode,\r\n        visited: true\r\n      };\r\n\r\n      //Flag visited nodes for update\r\n      newGrid[newNode.row][newNode.col] = newNode;\r\n      lastNode = newNode;\r\n    }\r\n\r\n    //Update state\r\n    //Do this once you flagged all nodes in the level\r\n    yield delay(50);\r\n    requestAnimationFrame(() => {\r\n      rclass.setState({ array: newGrid });\r\n    });\r\n  }\r\n\r\n  if (lastNode.isFinish) {\r\n    let current = lastNode;\r\n\r\n    while (current.row !== start_row || current.col !== start_col) {\r\n      let newNode = {\r\n        ...current,\r\n        path_visited: true\r\n      };\r\n\r\n      newGrid[newNode.row][newNode.col] = newNode;\r\n      yield delay(50);\r\n      rclass.setState({ array: newGrid });\r\n\r\n      current = current.previous;\r\n    }\r\n  }\r\n  rclass.setState({ isSearching: false });\r\n}\r\n\r\nclass Grid extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      array: [],\r\n      lmbDown: false,\r\n      rmbDown: false,\r\n      selectedObject: \"none\", //Enum Types: wall, start, finish,\r\n      activeAlgo: \"astar\",\r\n      isSearching: false\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ array: this.initGrid() });\r\n  }\r\n\r\n  visualizeAstar = makeSingleGenerator(this, visualizeAstar);\r\n  visualizeDijkstra = makeSingleGenerator(this, visualizeDijkstra);\r\n  visualizeBFS = makeSingleGenerator(this, visualizeBFS);\r\n  runSearch = this.visualizeAstar;\r\n\r\n  // Using setTimeout for delaying state update is fine for now, but\r\n  // may want to look into using async/await\r\n  /*\r\n  visualizeBFS() {\r\n    const newGrid = this.state.array.slice();\r\n\r\n    let orderedGroups = bfs(newGrid[start_row][start_col], newGrid);\r\n\r\n    //Loop through the nodes in each level of bfs\r\n    for (let i = 0; i < orderedGroups.length; i++) {\r\n      for (let orderedNode of orderedGroups[i]) {\r\n        let newNode = {\r\n          ...orderedNode,\r\n          visited: true\r\n        };\r\n\r\n        //Flag visited nodes for update\r\n        setTimeout(() => {\r\n          newGrid[newNode.row][newNode.col] = newNode;\r\n        }, 100 * i);\r\n      }\r\n\r\n      //Update state\r\n      //Do this once you flagged all nodes in the level\r\n      setTimeout(() => {\r\n        requestAnimationFrame(() => {\r\n          this.setState({ array: newGrid });\r\n        });\r\n      }, 100 * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.visualizePath(newGrid[finish_row][finish_col]);\r\n    }, 250 * orderedGroups.length + 1);\r\n  }\r\n\r\n  async visualizeDijkstra() {\r\n    const newGrid = this.state.array.slice();\r\n\r\n    let visitedNodes = dijkstra(newGrid[start_row][start_col], newGrid);\r\n    let count = 0;\r\n    //Loop through the nodes\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      let newNode = {\r\n        ...visitedNodes[i],\r\n        visited: true\r\n      };\r\n      count++;\r\n      //Flag visited nodes for update\r\n\r\n      newGrid[newNode.row][newNode.col] = newNode;\r\n\r\n      if (count % 1 == 0) {\r\n        //Ascynhrously Update state\r\n        await delay(5).then(p => {\r\n          requestAnimationFrame(() => {\r\n            this.setState({ array: newGrid });\r\n          });\r\n        });\r\n      }\r\n    }\r\n\r\n    this.visualizePath(newGrid[finish_row][finish_col]);\r\n  }\r\n\r\n  visualizeAstar() {\r\n    const newGrid = this.state.array.slice();\r\n\r\n    let visitedNodes = astar(\r\n      newGrid[start_row][start_col],\r\n      newGrid[finish_row][finish_col],\r\n      newGrid\r\n    );\r\n\r\n    //Loop through the nodes\r\n    for (let i = 0; i < visitedNodes.length; i++) {\r\n      let newNode = {\r\n        ...visitedNodes[i],\r\n        visited: true\r\n      };\r\n\r\n      //Flag visited nodes for update\r\n      //Do this faster than stae update\r\n      setTimeout(() => {\r\n        newGrid[newNode.row][newNode.col] = newNode;\r\n      }, 20 * i);\r\n\r\n      //Update state\r\n      //Do this once you flagged all nodes in the level\r\n      setTimeout(() => {\r\n        requestAnimationFrame(() => {\r\n          this.setState({ array: newGrid });\r\n        });\r\n      }, 50 * i);\r\n    }\r\n\r\n    setTimeout(() => {\r\n      this.visualizePath(newGrid[finish_row][finish_col]);\r\n    }, 50 * visitedNodes.length);\r\n  }\r\n\r\n  visualizePath(current) {\r\n    const newGrid = this.state.array.slice();\r\n    let count = 0;\r\n\r\n    while (current.row !== start_row || current.col !== start_col) {\r\n      let newNode = {\r\n        ...current,\r\n        path_visited: true\r\n      };\r\n\r\n      setTimeout(() => {\r\n        newGrid[newNode.row][newNode.col] = newNode;\r\n        this.setState({ array: newGrid });\r\n      }, 100 * ++count);\r\n\r\n      current = current.previous;\r\n    }\r\n  }\r\n  */\r\n\r\n  handleMouseDown(row, col, val) {\r\n    if (this.state.lmbDown || this.state.rmbDown) return;\r\n\r\n    if (val === 0) {\r\n      if (this.state.array[row][col].isStart) {\r\n        this.setState({ selectedObject: \"start\", lmbDown: true });\r\n        return;\r\n      }\r\n\r\n      if (this.state.array[row][col].isFinish) {\r\n        this.setState({ selectedObject: \"finish\", lmbDown: true });\r\n        return;\r\n      }\r\n\r\n      let toggledGrid = this.toggleWallOn(row, col, this.state.array);\r\n      this.setState({ array: toggledGrid, lmbDown: true });\r\n    }\r\n\r\n    if (val === 2) {\r\n      let toggledGrid = this.toggleWallOff(row, col, this.state.array);\r\n      this.setState({ array: toggledGrid, rmbDown: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.lmbDown && !this.state.rmbDown) return;\r\n\r\n    if (this.state.selectedObject === \"start\") {\r\n      let editedGrid = this.moveStart(row, col, this.state.array);\r\n      this.setState({ array: editedGrid });\r\n      return;\r\n    }\r\n\r\n    if (this.state.selectedObject === \"finish\") {\r\n      let editedGrid = this.moveFinish(row, col, this.state.array);\r\n      this.setState({ array: editedGrid });\r\n      return;\r\n    }\r\n\r\n    if (this.state.lmbDown) {\r\n      let toggledGrid = this.toggleWallOn(row, col, this.state.array);\r\n      this.setState({ array: toggledGrid });\r\n    }\r\n\r\n    if (this.state.rmbDown) {\r\n      let toggledGrid = this.toggleWallOff(row, col, this.state.array);\r\n      this.setState({ array: toggledGrid });\r\n    }\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    this.setState({ selectedObject: \"none\", lmbDown: false, rmbDown: false });\r\n  }\r\n\r\n  moveStart(row, col, grid) {\r\n    const newGrid = grid.slice();\r\n    if (!newGrid[row][col].isFinish) {\r\n      newGrid[start_row][start_col].isStart = false;\r\n      newGrid[row][col].isStart = true;\r\n      start_row = row;\r\n      start_col = col;\r\n    }\r\n\r\n    return newGrid;\r\n  }\r\n\r\n  moveFinish(row, col, grid) {\r\n    const newGrid = grid.slice();\r\n    if (!newGrid[row][col].isStart) {\r\n      newGrid[finish_row][finish_col].isFinish = false;\r\n      newGrid[row][col].isFinish = true;\r\n      finish_row = row;\r\n      finish_col = col;\r\n    }\r\n\r\n    return newGrid;\r\n  }\r\n\r\n  toggleWallOn(row, col, grid) {\r\n    const newGrid = grid.slice();\r\n    newGrid[row][col].isWall = true;\r\n    return newGrid;\r\n  }\r\n\r\n  toggleWallOff(row, col, grid) {\r\n    const newGrid = grid.slice();\r\n    newGrid[row][col].isWall = false;\r\n    return newGrid;\r\n  }\r\n\r\n  setAlgorithim(val) {\r\n    this.setState({ activeAlgo: val });\r\n\r\n    if (val === \"astar\") {\r\n      this.runSearch = this.visualizeAstar;\r\n    } else if (val === \"dijkstra\") {\r\n      this.runSearch = this.visualizeDijkstra;\r\n    } else if (val === \"bfs\") {\r\n      this.runSearch = this.visualizeBFS;\r\n    }\r\n  }\r\n\r\n  startSearch() {\r\n    this.setState({ isSearching: true });\r\n    this.runSearch(this);\r\n  }\r\n\r\n  cancelSearch() {\r\n    this.setState({ isSearching: false });\r\n  }\r\n\r\n  //Initialize Grid\r\n  initGrid = () => {\r\n    const arr = [];\r\n    for (let row = 0; row < GRID_HEIGHT; row++) {\r\n      const currRow = [];\r\n      for (let col = 0; col < GRID_WIDTH; col++) {\r\n        currRow.push(this.genNode(row, col));\r\n      }\r\n      arr.push(currRow);\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  //Remove all walls from grid\r\n  clearWalls() {\r\n    this.setState({ array: this.initGrid() });\r\n  }\r\n\r\n  clearPath() {\r\n    let newGrid = this.state.array.slice();\r\n    for (let i = 0; i < newGrid.length; i++) {\r\n      for (let j = 0; j < newGrid[i].length; j++) {\r\n        newGrid[i][j].visited = false;\r\n        newGrid[i][j].path_visited = false;\r\n      }\r\n    }\r\n\r\n    this.setState({ array: newGrid });\r\n  }\r\n\r\n  //Reset the grid\r\n  resetGrid() {\r\n    start_row = DEFAULT_START_ROW;\r\n    start_col = DEFAULT_START_COL;\r\n    finish_row = DEFAULT_FINISH_ROW;\r\n    finish_col = DEFAULT_FINISH_COL;\r\n\r\n    this.setState({ array: this.initGrid() });\r\n  }\r\n\r\n  //Generate Node Object\r\n  genNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart: row === start_row && col === start_col,\r\n      isFinish: row === finish_row && col === finish_col,\r\n      isWall: false,\r\n      visited: false,\r\n      path_visited: false,\r\n      previous: null\r\n    };\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"wrapper\">\r\n          <Draggable initialPos={{ x: 1300, y: 40 }}>\r\n            <h1>Pathfinding Visualizer</h1>\r\n            <header>\r\n              <h2 className=\"sub-title\">Select Algorithim</h2>\r\n            </header>\r\n\r\n            <div className=\"options\">\r\n              <label\r\n                className={`option-title ${\r\n                  this.state.isSearching ? \"disabled\" : \"\"\r\n                }`}\r\n              >\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"algorithim\"\r\n                  value=\"astar\"\r\n                  defaultChecked\r\n                  disabled={this.state.isSearching}\r\n                  onChange={e => this.setAlgorithim(e.target.value)}\r\n                ></input>\r\n                Astar\r\n              </label>\r\n              <br></br>\r\n\r\n              <label\r\n                className={`option-title ${\r\n                  this.state.isSearching ? \"disabled\" : \"\"\r\n                }`}\r\n              >\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"algorithim\"\r\n                  value=\"dijkstra\"\r\n                  disabled={this.state.isSearching}\r\n                  onChange={e => this.setAlgorithim(e.target.value)}\r\n                ></input>\r\n                Dijkstra\r\n              </label>\r\n              <br></br>\r\n\r\n              <label\r\n                className={`option-title ${\r\n                  this.state.isSearching ? \"disabled\" : \"\"\r\n                }`}\r\n              >\r\n                <input\r\n                  type=\"radio\"\r\n                  name=\"algorithim\"\r\n                  value=\"bfs\"\r\n                  disabled={this.state.isSearching}\r\n                  onChange={e => this.setAlgorithim(e.target.value)}\r\n                ></input>\r\n                Breadth First Search\r\n              </label>\r\n            </div>\r\n          </Draggable>\r\n\r\n          <Draggable initialPos={{ x: 1275, y: 325 }}>\r\n            <button className=\"bu\" onClick={() => this.startSearch()}>\r\n              Start Search\r\n            </button>\r\n            <button\r\n              className=\"bu\"\r\n              onClick={() =>\r\n                this.state.isSearching ? this.cancelSearch() : this.clearPath()\r\n              }\r\n            >\r\n              {this.state.isSearching ? \"Cancel Search\" : \"Clear Path\"}\r\n            </button>\r\n            <button\r\n              className=\"bu\"\r\n              disabled={this.state.isSearching}\r\n              onClick={() => this.clearWalls()}\r\n            >\r\n              Clear Walls\r\n            </button>\r\n            <button\r\n              className=\"bu\"\r\n              disabled={this.state.isSearching}\r\n              onClick={() => this.resetGrid()}\r\n            >\r\n              Reset\r\n            </button>\r\n          </Draggable>\r\n\r\n          <div className=\"board\">\r\n            {this.state.array.map((row, ridx) => (\r\n              <div className=\"grid-row\">\r\n                {row.map((node, cidx) => (\r\n                  <Node\r\n                    row={node.row}\r\n                    col={node.col}\r\n                    isStart={node.isStart}\r\n                    isFinish={node.isFinish}\r\n                    isWall={node.isWall}\r\n                    visited={node.visited}\r\n                    path_visited={node.path_visited}\r\n                    onMouseDown={(row, col, val) =>\r\n                      this.handleMouseDown(row, col, val)\r\n                    }\r\n                    onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                  >\r\n                    {/*{node.row + \",\" + node.col}*/}\r\n                  </Node>\r\n                ))}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport { Grid };\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\n\nimport { Grid } from \"./Grid.js\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Grid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}